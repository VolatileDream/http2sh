#!/usr/bin/env python3

from werkzeug.wrappers import Request, Response

import subprocess

class http2sh(object):

	def __init__(self, shell_start=None, split=None, no_strip=False):

		if shell_start is None:
			shell_start = ["echo"]

		self.shell_start = shell_start
		self.split = split
		self.no_strip = no_strip

	def dispatch_request(self, request):
		args = self.shell_start.copy()

		if self.no_strip:
			used_path = request.path
		else:
			# trim the leading '/' from the path
			used_path = request.path[1:]

		path_args = [used_path]

		if self.split:
			path_args = used_path.split(self.split)

		args.extend( path_args )

		subprocess.call( args )

		return Response("Executing: " + str(args))

	def wsgi_app(self, environ, start_response):
		request = Request(environ)
		response = self.dispatch_request(request)
		return response(environ, start_response)

	def __call__(self, environ, start_response):
		return self.wsgi_app(environ, start_response)


import argparse


def arg_parser():
	parser = argparse.ArgumentParser(description='A terrible hack to send paramaters to a shell command')

	parser.add_argument('shell_start', metavar='arg', nargs="*"
			, help='initial shell parameters', default=["echo"])

	parser.add_argument('-p', '--port', type=int, default=4000
			, help='the port to run on')

	parser.add_argument('-s', '--split', default='/'
			, help="the string used to split urls into parameters, default='/'")

	parser.add_argument('-n', '--no-strip', default=False, action='store_const', const=True
			, help="by default, the leading '/' is removed from the path, this flag disables that." )

	return parser


if __name__ == '__main__':
	from werkzeug.serving import run_simple

	parser = arg_parser()

	args = parser.parse_args()

	if len(args.shell_start) == 0:
		raise Exception('You must provide the program to run. Anything else is horribly horribly insecure.')

	print("Spliting on: %s" % (args.split) )

	app = http2sh(shell_start=args.shell_start, split=args.split, no_strip=args.no_strip)

	run_simple('localhost', args.port, app)


